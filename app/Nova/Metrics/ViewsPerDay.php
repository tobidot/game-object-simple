<?php

namespace App\Nova\Metrics;

use App\Models\View;
use DateInterval;
use DateTimeInterface;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Log;
use Laravel\Nova\Http\Requests\NovaRequest;
use Laravel\Nova\Metrics\Trend;
use Laravel\Nova\Metrics\TrendResult;

class ViewsPerDay extends Trend
{

    public function __construct(
        public Model|string|null $target = null
    )
    {
        parent::__construct();
    }

    /**
     * Calculate the value of the metric.
     *
     * @param NovaRequest $request
     * @return TrendResult
     */
    public function calculate(NovaRequest $request): TrendResult
    {
        $query = View::query()
            ->when(
                $this->target instanceof Model,
                function ($query) {
                    return $query
                        ->where('viewable_type', $this->target->getMorphClass())
                        ->where('viewable_id', $this->target->getKey());
                }
            )
            ->when(
                is_string($this->target),
                function ($query) use ($request) {
                    $modelId = $request->resourceId;

                    return $query
                        ->where('viewable_type', $this->target)
                        ->when(
                            !is_null($modelId),
                            function ($query) use ($modelId) {
                                return $query
                                    ->where('viewable_id', $modelId);
                            }
                        );
                }
            );

        Log::debug('ViewsPerDay::calculate() query: ' . $query->toRawSql());
        return $this->countByDays(
            $request,
            $query,
        );
    }


    /**
     * Get the ranges available for the metric.
     *
     * @return array
     */
    public function ranges(): array
    {
        return [
            7 => __('1 Week'),
            30 => __('30 Days'),
            60 => __('60 Days'),
            90 => __('90 Days'),
            365 => __('1 Year'),
        ];
    }

    public function getCacheKey(NovaRequest $request)
    {
        return parent::getCacheKey($request) . '.' . $this->getTargetType(); // TODO: Change the autogenerated stub
    }

    public function getTargetType(): string
    {
        if ($this->target instanceof Model) {
            return $this->target->getMorphClass();
        }
        if (is_string($this->target)) {
            return $this->target;
        }
        return 'null';
    }

    /**
     * Determine the amount of time the results of the metric should be cached.
     *
     * @return DateTimeInterface|DateInterval|float|int|null
     */
    public function cacheFor() : DateTimeInterface|DateInterval|float|int|null
    {
         return now()->addMinutes(5);
    }

    /**
     * Get the URI key for the metric.
     *
     * @return string
     */
    public function uriKey(): string
    {
        return 'views-per-day';
    }
}
